// __multiversion__

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300

#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
_centroid in highp vec2 uv;
#else
_centroid in vec2 uv;
#endif

#else

varying vec2 uv;

#endif

#include "uniformShaderConstants.h"
#include "util.h"

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;

void main()
{
	vec2 suv = fract(uv * 32.0) * (1.0 / 64.0);
	vec4 diffuse;
	if(TEXTURE_DIMENSIONS.xy == vec2(1024, 1024) || TEXTURE_DIMENSIONS.xy == vec2(2048, 2048) || TEXTURE_DIMENSIONS.xy == vec2(4096, 4096)){
		diffuse = texelFetch(TEXTURE_0, ivec2((uv - suv) * TEXTURE_DIMENSIONS.xy), 0);
	} else {
		diffuse = texture2D(TEXTURE_0, uv);
	}

#ifdef ALPHA_TEST
	if(diffuse.a < 0.5)
		discard;
#endif

	gl_FragColor = CURRENT_COLOR * diffuse;
}
